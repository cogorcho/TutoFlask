<!--
% extends 'base.html' % tells Jinja that this template should replace the blocks from 
the base template. 
All the rendered content must appear inside % block % tags that override blocks from 
the base template.

A useful pattern used here is to place % block title % inside % block header }. 
This will set the title block and then output the value of it into the header block, 
so that both the window and page share the same title without writing it twice.

The input tags are using the required attribute here. 
This tells the browser not to submit the form until those fields are filled in. 
If the user is using an older browser that doesn’t support that attribute, or if 
they are using something besides a browser to make requests, you still want to 
validate the data in the Flask view. 

It’s important to always fully validate the data on the server, 
even if the client does some validation as well.

-->

<!--
g is automatically available in templates. 
Based on if g.user is set (from load_logged_in_user), either the username and a log out 
link are displayed, or links to register and log in are displayed. 

url_for() is also automatically available, and is used to generate URLs to views instead 
of writing them out manually.

After the page title, and before the content, the template loops over each message returned 
by get_flashed_messages(). 
You used flash() in the views to show error messages, and this is the code that will display them.


There are three blocks defined here that will be overridden in the other templates:

1. % block title % will change the title displayed in the browser’s tab and window title.
2. % block header % is similar to title but will change the title displayed on the page.
3. % block content % is where the content of each page goes, such as the login form or a blog post.

The base template is directly in the templates directory. 
To keep the others organized, the templates for a blueprint will be placed in a directory 
with the same name as the blueprint.
-->